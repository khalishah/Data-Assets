#### Insights 2 - Purchase Amount Sum Function

This insight is the purchase amount sum function of a specified feature over a stated period of days. The default parameters are stated for the function below. There are possibly two dataframe outputs out of this function:-

  1) Where groupColumn is None (no grouping is done): The resulting output will show the sum of purchase amounts per customer at which transaction happened between the customer and the feature stated under featureColumn at a given time period.

  2) Where groupColumn is defined (grouping is done based on the groupColumn definition): The resulting output will show the sum of purchase amounts at which the customer made a transaction under a specific feature grouped by the groupColumn definition.

def purchase_amount_of_feature_over_a_specified_time_period(df, time_period_in_days, dateColumn = 'date', amountColumn = 'sales', featureColumn = 'date', IDColumn ='customer', groupColumn = None):
    
    # df = dataframe
    # time_period_in_days = number of days before today you want to look into
    # dateColumn = the date column in the dataframe
    # amountColumn = the net amount column that you want sum on
    # variableColumn = the column that the count was based on
    # groupColumn = the column that the aggregation was grouped by
    
    from datetime import date, datetime, timedelta
    
    filtered_df = df[df[dateColumn] < pd.Timestamp(date.today() - timedelta(days=time_period_in_days))]
    
    if groupColumn is None: 
        encode = pd.get_dummies(filtered_df[[IDColumn, amountColumn, featureColumn]], columns = [featureColumn])
        encode = encode.drop(encode[encode[amountColumn] < 0].index)
        encode.set_index([IDColumn, amountColumn], inplace = True)
        summation = encode.groupby(level = [IDColumn, amountColumn]).sum()
        ans = summation.reset_index().groupby(IDColumn).agg('sum')
        ans = ans.iloc[:,2:].multiply(ans[amountColumn], axis='index')
        
        columnList = []
        for cols in ans.columns.tolist()[1:]:
            cols_result = cols.replace(featureColumn, amountColumn + '_from') + '_in_' + str(time_period_in_days) + '_days'
            columnList.append(cols_result)
            
        ans.columns = [IDColumn] + columnList
        ans = ans.drop(IDColumn, axis = 1)
        
        return ans
    
    else:
        filtered_df = filtered_df.drop(filtered_df[filtered_df[amountColumn] < 0].index)
        ##for local net amount of feature per member aggregated at group
        ans = pd.DataFrame(filtered_df.groupby(IDColumn)[amountColumn].agg('sum'))
        ##for local net amount of feature per grouped item per member
        #ans = pd.DataFrame(filtered_df.groupby([IDColumn, groupColumn])[amountColumn].agg(['sum']))
        ans.columns = [amountColumn + '_' + 'in_' + str(time_period_in_days) + '_days']
        return ans
